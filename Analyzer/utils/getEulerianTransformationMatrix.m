function [M] = getEulerianTransformationMatrix(g,coords)
%GETEULERIANTRANSFORMATION returns the Cholesky transformation matrix for a given metric
%   Using an explicit Cholesky decomposition, the function builds the unique
%   lower triangular matrix with positive diagonal values that converts the
%   matrix representation of the metric tensor to a flat metric
%   (i.e.) M.'.*g.*M = eta.
%   g must be symmetric.
%
%     Explicit Cholesky Decomposition
%     M(1,1) = -(-1./((g(4,4).*g(2,3).^2 - 2.*g(2,3).*g(2,4).*g(3,4) + g(3,3).*g(2,4).^2 + g(2,2).*g(3,4).^2 - g(2,2).*g(3,3).*g(4,4)).*(- g(1,2).^2.*g(3,4).^2 + g(3,3).*g(4,4).*g(1,2).^2 - 2.*g(4,4).*g(1,2).*g(1,3).*g(2,3) + 2.*g(1,2).*g(1,3).*g(2,4).*g(3,4) + 2.*g(1,2).*g(1,4).*g(2,3).*g(3,4) - 2.*g(3,3).*g(1,2).*g(1,4).*g(2,4) - g(1,3).^2.*g(2,4).^2 + g(2,2).*g(4,4).*g(1,3).^2 + 2.*g(1,3).*g(1,4).*g(2,3).*g(2,4) - 2.*g(2,2).*g(1,3).*g(1,4).*g(3,4) - g(1,4).^2.*g(2,3).^2 + g(2,2).*g(3,3).*g(1,4).^2 + g(1,1).*g(4,4).*g(2,3).^2 - 2.*g(1,1).*g(2,3).*g(2,4).*g(3,4) + g(1,1).*g(3,3).*g(2,4).^2 + g(1,1).*g(2,2).*g(3,4).^2 - g(1,1).*g(2,2).*g(3,3).*g(4,4)))).^(1./2).*(g(4,4).*g(2,3).^2 - 2.*g(2,3).*g(2,4).*g(3,4) + g(3,3).*g(2,4).^2 + g(2,2).*g(3,4).^2 - g(2,2).*g(3,3).*g(4,4));
%     M(2,1) = (-1./((g(4,4).*g(2,3).^2 - 2.*g(2,3).*g(2,4).*g(3,4) + g(3,3).*g(2,4).^2 + g(2,2).*g(3,4).^2 - g(2,2).*g(3,3).*g(4,4)).*(- g(1,2).^2.*g(3,4).^2 + g(3,3).*g(4,4).*g(1,2).^2 - 2.*g(4,4).*g(1,2).*g(1,3).*g(2,3) + 2.*g(1,2).*g(1,3).*g(2,4).*g(3,4) + 2.*g(1,2).*g(1,4).*g(2,3).*g(3,4) - 2.*g(3,3).*g(1,2).*g(1,4).*g(2,4) - g(1,3).^2.*g(2,4).^2 + g(2,2).*g(4,4).*g(1,3).^2 + 2.*g(1,3).*g(1,4).*g(2,3).*g(2,4) - 2.*g(2,2).*g(1,3).*g(1,4).*g(3,4) - g(1,4).^2.*g(2,3).^2 + g(2,2).*g(3,3).*g(1,4).^2 + g(1,1).*g(4,4).*g(2,3).^2 - 2.*g(1,1).*g(2,3).*g(2,4).*g(3,4) + g(1,1).*g(3,3).*g(2,4).^2 + g(1,1).*g(2,2).*g(3,4).^2 - g(1,1).*g(2,2).*g(3,3).*g(4,4)))).^(1./2).*(g(1,2).*g(3,4).^2 + g(1,3).*g(2,3).*g(4,4) - g(1,3).*g(2,4).*g(3,4) - g(1,4).*g(2,3).*g(3,4) + g(1,4).*g(2,4).*g(3,3) - g(1,2).*g(3,3).*g(4,4));
%     M(2,2) = (- g(3,4).^2 + g(3,3).*g(4,4)).*(-1./((- g(3,4).^2 + g(3,3).*g(4,4)).*(g(4,4).*g(2,3).^2 - 2.*g(2,3).*g(2,4).*g(3,4) + g(3,3).*g(2,4).^2 + g(2,2).*g(3,4).^2 - g(2,2).*g(3,3).*g(4,4)))).^(1./2);
%     M(3,1) = (-1./((g(4,4).*g(2,3).^2 - 2.*g(2,3).*g(2,4).*g(3,4) + g(3,3).*g(2,4).^2 + g(2,2).*g(3,4).^2 - g(2,2).*g(3,3).*g(4,4)).*(- g(1,2).^2.*g(3,4).^2 + g(3,3).*g(4,4).*g(1,2).^2 - 2.*g(4,4).*g(1,2).*g(1,3).*g(2,3) + 2.*g(1,2).*g(1,3).*g(2,4).*g(3,4) + 2.*g(1,2).*g(1,4).*g(2,3).*g(3,4) - 2.*g(3,3).*g(1,2).*g(1,4).*g(2,4) - g(1,3).^2.*g(2,4).^2 + g(2,2).*g(4,4).*g(1,3).^2 + 2.*g(1,3).*g(1,4).*g(2,3).*g(2,4) - 2.*g(2,2).*g(1,3).*g(1,4).*g(3,4) - g(1,4).^2.*g(2,3).^2 + g(2,2).*g(3,3).*g(1,4).^2 + g(1,1).*g(4,4).*g(2,3).^2 - 2.*g(1,1).*g(2,3).*g(2,4).*g(3,4) + g(1,1).*g(3,3).*g(2,4).^2 + g(1,1).*g(2,2).*g(3,4).^2 - g(1,1).*g(2,2).*g(3,3).*g(4,4)))).^(1./2).*(g(1,3).*g(2,4).^2 - g(1,4).*g(2,3).*g(2,4) + g(1,2).*g(2,3).*g(4,4) - g(1,2).*g(2,4).*g(3,4) - g(1,3).*g(2,2).*g(4,4) + g(1,4).*g(2,2).*g(3,4));
%     M(3,2) = -(g(2,3).*g(4,4) - g(2,4).*g(3,4)).*(-1./((- g(3,4).^2 + g(3,3).*g(4,4)).*(g(4,4).*g(2,3).^2 - 2.*g(2,3).*g(2,4).*g(3,4) + g(3,3).*g(2,4).^2 + g(2,2).*g(3,4).^2 - g(2,2).*g(3,3).*g(4,4)))).^(1./2);
%     M(3,3) = g(4,4).*(1./(g(4,4).*(- g(3,4).^2 + g(3,3).*g(4,4)))).^(1./2);
%     M(4,1) = (-1./((g(4,4).*g(2,3).^2 - 2.*g(2,3).*g(2,4).*g(3,4) + g(3,3).*g(2,4).^2 + g(2,2).*g(3,4).^2 - g(2,2).*g(3,3).*g(4,4)).*(- g(1,2).^2.*g(3,4).^2 + g(3,3).*g(4,4).*g(1,2).^2 - 2.*g(4,4).*g(1,2).*g(1,3).*g(2,3) + 2.*g(1,2).*g(1,3).*g(2,4).*g(3,4) + 2.*g(1,2).*g(1,4).*g(2,3).*g(3,4) - 2.*g(3,3).*g(1,2).*g(1,4).*g(2,4) - g(1,3).^2.*g(2,4).^2 + g(2,2).*g(4,4).*g(1,3).^2 + 2.*g(1,3).*g(1,4).*g(2,3).*g(2,4) - 2.*g(2,2).*g(1,3).*g(1,4).*g(3,4) - g(1,4).^2.*g(2,3).^2 + g(2,2).*g(3,3).*g(1,4).^2 + g(1,1).*g(4,4).*g(2,3).^2 - 2.*g(1,1).*g(2,3).*g(2,4).*g(3,4) + g(1,1).*g(3,3).*g(2,4).^2 + g(1,1).*g(2,2).*g(3,4).^2 - g(1,1).*g(2,2).*g(3,3).*g(4,4)))).^(1./2).*(g(1,4).*g(2,3).^2 - g(1,3).*g(2,3).*g(2,4) - g(1,2).*g(2,3).*g(3,4) + g(1,2).*g(2,4).*g(3,3) + g(1,3).*g(2,2).*g(3,4) - g(1,4).*g(2,2).*g(3,3));
%     M(4,2) = (g(2,3).*g(3,4) - g(2,4).*g(3,3)).*(-1./((- g(3,4).^2 + g(3,3).*g(4,4)).*(g(4,4).*g(2,3).^2 - 2.*g(2,3).*g(2,4).*g(3,4) + g(3,3).*g(2,4).^2 + g(2,2).*g(3,4).^2 - g(2,2).*g(3,3).*g(4,4)))).^(1./2);
%     M(4,3) = -g(3,4).*(1./(g(4,4).*(- g(3,4).^2 + g(3,3).*g(4,4)))).^(1./2);
%     M(4,4) = (1./g(4,4)).^(1./2);

% For simple 4x4 metrics
if length(size(g)) == 2

    % Assert that g must be Symmetric
    assert(isequal(g,g.'),'g is Not Symmetric')

    % Explicit Cholesky Decomposition
    factor0 = g(4,4);
    factor1 = (- g(3,4).^2 + g(3,3).*factor0);
    factor2 = (2.*g(2,3).*g(2,4).*g(3,4) - g(4,4).*g(2,3).^2 - g(3,3).*g(2,4).^2 + g(2,2).*factor1);
    factor3 = (- 2.*g(4,4).*g(1,2).*g(1,3).*g(2,3) + 2.*g(1,3).*g(1,4).*g(2,3).*g(2,4) + 2.*g(1,2).*g(1,3).*g(2,4).*g(3,4) + 2.*g(1,2).*g(1,4).*g(2,3).*g(3,4) - g(1,2).^2.*g(3,4).^2 - g(1,3).^2.*g(2,4).^2 - g(1,4).^2.*g(2,3).^2 + g(3,3).*(- 2.*g(1,2).*g(1,4).*g(2,4) + g(4,4).*g(1,2).^2) + g(2,2).*(- 2.*g(1,3).*g(1,4).*g(3,4) + g(4,4).*g(1,3).^2 + g(3,3).*g(1,4).^2) - g(1,1).*factor2);

    M(1,1) =  (factor2./factor3).^(1./2);
    M(2,1) =  (g(1,2).*g(3,4).^2 + g(1,3).*g(2,3).*g(4,4) - g(1,3).*g(2,4).*g(3,4) - g(1,4).*g(2,3).*g(3,4) + g(1,4).*g(2,4).*g(3,3) - g(1,2).*g(3,3).*g(4,4))./(factor2.*factor3).^(1./2);
    M(3,1) =  (g(1,3).*g(2,4).^2 - g(1,4).*g(2,3).*g(2,4) + g(1,2).*g(2,3).*g(4,4) - g(1,2).*g(2,4).*g(3,4) - g(1,3).*g(2,2).*g(4,4) + g(1,4).*g(2,2).*g(3,4))./(factor2.*factor3).^(1./2);
    M(4,1) =  (g(1,4).*g(2,3).^2 - g(1,3).*g(2,3).*g(2,4) - g(1,2).*g(2,3).*g(3,4) + g(1,2).*g(2,4).*g(3,3) + g(1,3).*g(2,2).*g(3,4) - g(1,4).*g(2,2).*g(3,3))./(factor2.*factor3).^(1./2);

    M(2,2) =  (factor1./factor2).^(1./2);
    M(3,2) =  (g(2,4).*g(3,4) - g(2,3).*g(4,4))./(factor1.*factor2).^(1./2);
    M(4,2) =  (g(2,3).*g(3,4) - g(2,4).*g(3,3))./(factor1.*factor2).^(1./2);

    M(3,3) =  (factor0./factor1).^(1./2);
    M(4,3) =  -g(3,4)./(factor0.*factor1).^(1./2);

    M(4,4) =  (1./factor0).^(1./2);


% For spacetime array metrics
elseif (length(size(g)) == 6)

    % Explicit Cholesky Decomposition
    factor0 = g(:,:,:,:,4,4);
    factor1 = (- g(:,:,:,:,3,4).^2 + g(:,:,:,:,3,3).*factor0);
    factor2 = (2.*g(:,:,:,:,2,3).*g(:,:,:,:,2,4).*g(:,:,:,:,3,4) - g(:,:,:,:,4,4).*g(:,:,:,:,2,3).^2 - g(:,:,:,:,3,3).*g(:,:,:,:,2,4).^2 + g(:,:,:,:,2,2).*factor1);
    factor3 = (- 2.*g(:,:,:,:,4,4).*g(:,:,:,:,1,2).*g(:,:,:,:,1,3).*g(:,:,:,:,2,3) + 2.*g(:,:,:,:,1,3).*g(:,:,:,:,1,4).*g(:,:,:,:,2,3).*g(:,:,:,:,2,4) + 2.*g(:,:,:,:,1,2).*g(:,:,:,:,1,3).*g(:,:,:,:,2,4).*g(:,:,:,:,3,4) + 2.*g(:,:,:,:,1,2).*g(:,:,:,:,1,4).*g(:,:,:,:,2,3).*g(:,:,:,:,3,4) - g(:,:,:,:,1,2).^2.*g(:,:,:,:,3,4).^2 - g(:,:,:,:,1,3).^2.*g(:,:,:,:,2,4).^2 - g(:,:,:,:,1,4).^2.*g(:,:,:,:,2,3).^2 + g(:,:,:,:,3,3).*(- 2.*g(:,:,:,:,1,2).*g(:,:,:,:,1,4).*g(:,:,:,:,2,4) + g(:,:,:,:,4,4).*g(:,:,:,:,1,2).^2) + g(:,:,:,:,2,2).*(- 2.*g(:,:,:,:,1,3).*g(:,:,:,:,1,4).*g(:,:,:,:,3,4) + g(:,:,:,:,4,4).*g(:,:,:,:,1,3).^2 + g(:,:,:,:,3,3).*g(:,:,:,:,1,4).^2) - g(:,:,:,:,1,1).*factor2);

    M(:,:,:,:,1,1) =  (factor2./factor3).^(1./2);
    M(:,:,:,:,2,1) =  (g(:,:,:,:,1,2).*g(:,:,:,:,3,4).^2 + g(:,:,:,:,1,3).*g(:,:,:,:,2,3).*g(:,:,:,:,4,4) - g(:,:,:,:,1,3).*g(:,:,:,:,2,4).*g(:,:,:,:,3,4) - g(:,:,:,:,1,4).*g(:,:,:,:,2,3).*g(:,:,:,:,3,4) + g(:,:,:,:,1,4).*g(:,:,:,:,2,4).*g(:,:,:,:,3,3) - g(:,:,:,:,1,2).*g(:,:,:,:,3,3).*g(:,:,:,:,4,4))./(factor2.*factor3).^(1./2);
    M(:,:,:,:,3,1) =  (g(:,:,:,:,1,3).*g(:,:,:,:,2,4).^2 - g(:,:,:,:,1,4).*g(:,:,:,:,2,3).*g(:,:,:,:,2,4) + g(:,:,:,:,1,2).*g(:,:,:,:,2,3).*g(:,:,:,:,4,4) - g(:,:,:,:,1,2).*g(:,:,:,:,2,4).*g(:,:,:,:,3,4) - g(:,:,:,:,1,3).*g(:,:,:,:,2,2).*g(:,:,:,:,4,4) + g(:,:,:,:,1,4).*g(:,:,:,:,2,2).*g(:,:,:,:,3,4))./(factor2.*factor3).^(1./2);
    M(:,:,:,:,4,1) =  (g(:,:,:,:,1,4).*g(:,:,:,:,2,3).^2 - g(:,:,:,:,1,3).*g(:,:,:,:,2,3).*g(:,:,:,:,2,4) - g(:,:,:,:,1,2).*g(:,:,:,:,2,3).*g(:,:,:,:,3,4) + g(:,:,:,:,1,2).*g(:,:,:,:,2,4).*g(:,:,:,:,3,3) + g(:,:,:,:,1,3).*g(:,:,:,:,2,2).*g(:,:,:,:,3,4) - g(:,:,:,:,1,4).*g(:,:,:,:,2,2).*g(:,:,:,:,3,3))./(factor2.*factor3).^(1./2);

    M(:,:,:,:,2,2) =  (factor1./factor2).^(1./2);
    M(:,:,:,:,3,2) =  (g(:,:,:,:,2,4).*g(:,:,:,:,3,4) - g(:,:,:,:,2,3).*g(:,:,:,:,4,4))./(factor1.*factor2).^(1./2);
    M(:,:,:,:,4,2) =  (g(:,:,:,:,2,3).*g(:,:,:,:,3,4) - g(:,:,:,:,2,4).*g(:,:,:,:,3,3))./(factor1.*factor2).^(1./2);

    M(:,:,:,:,3,3) =  (factor0./factor1).^(1./2);
    M(:,:,:,:,4,3) =  -g(:,:,:,:,3,4)./(factor0.*factor1).^(1./2);

    M(:,:,:,:,4,4) =  (1./factor0).^(1./2);

else
    warning('Unrecognized matrix size');
end

if sum(isinf(M)) %% ,'all')
    warning("Eulerian Transformation is Infinite - Numerical Precision Insufficient")
end

if ~isreal(M)
    warning("Eulerian Transformation is imaginary - Numerical Precision Insufficient")
end

%% NEW CODE:

% Only takes in array values
% s = size(g);
% if strcmpi(coords,'Cartesian')
%     X1 = ones(s(1:4));
%     X2 = ones(s(1:4));
%     X3 = ones(s(1:4));
% elseif strcmpi(coords,'Cylindrical') || strcmpi(coords,'Axisymmetric')
%     X1 = ones(s(1:4));
%     for t = 1:s(1)
%         for i = 1:s(2)
%             for j = 1:s(3)
%                 for k = s(4)
%                     X1(t,i,j,k) = (j-4-1).^2;
%                 end
%             end
%         end
%     end
%     X2 = ones(s(1:4));
%     X3 = ones(s(1:4));
% elseif strcmpi(coords,'Spherical')
%     error('Spherical coordinate system not implemented')
% else
%     error('Coordinate system not recognized')
% end
%
%     g1 = g(:,:,:,:,1,1);
%     g2 = g(:,:,:,:,1,2);
%     g3 = g(:,:,:,:,1,3);
%     g4 = g(:,:,:,:,1,4);
%     g5 = g(:,:,:,:,2,2);
%     g6 = g(:,:,:,:,2,3);
%     g7 = g(:,:,:,:,2,4);
%     g8 = g(:,:,:,:,3,3);
%     g9 = g(:,:,:,:,3,4);
%     g10 = g(:,:,:,:,4,4);
%
%     M(:,:,:,:,1,1) = -(-1./((g10.*g6.^2 - 2.*g6.*g7.*g9 + g8.*g7.^2 + g5.*g9.^2 - g5.*g8.*g10).*(- g2.^2.*g9.^2 + g8.*g10.*g2.^2 - 2.*g10.*g2.*g3.*g6 + 2.*g2.*g3.*g7.*g9 + 2.*g2.*g4.*g6.*g9 - 2.*g8.*g2.*g4.*g7 - g3.^2.*g7.^2 + g5.*g10.*g3.^2 + 2.*g3.*g4.*g6.*g7 - 2.*g5.*g3.*g4.*g9 - g4.^2.*g6.^2 + g5.*g8.*g4.^2 + g1.*g10.*g6.^2 - 2.*g1.*g6.*g7.*g9 + g1.*g8.*g7.^2 + g1.*g5.*g9.^2 - g1.*g5.*g8.*g10))).^(1./2).*(g10.*g6.^2 - 2.*g6.*g7.*g9 + g8.*g7.^2 + g5.*g9.^2 - g5.*g8.*g10);
%     M(:,:,:,:,2,1) = (-1./((g10.*g6.^2 - 2.*g6.*g7.*g9 + g8.*g7.^2 + g5.*g9.^2 - g5.*g8.*g10).*(- g2.^2.*g9.^2 + g8.*g10.*g2.^2 - 2.*g10.*g2.*g3.*g6 + 2.*g2.*g3.*g7.*g9 + 2.*g2.*g4.*g6.*g9 - 2.*g8.*g2.*g4.*g7 - g3.^2.*g7.^2 + g5.*g10.*g3.^2 + 2.*g3.*g4.*g6.*g7 - 2.*g5.*g3.*g4.*g9 - g4.^2.*g6.^2 + g5.*g8.*g4.^2 + g1.*g10.*g6.^2 - 2.*g1.*g6.*g7.*g9 + g1.*g8.*g7.^2 + g1.*g5.*g9.^2 - g1.*g5.*g8.*g10))).^(1./2).*(g2.*g9.^2 + g3.*g6.*g10 - g3.*g7.*g9 - g4.*g6.*g9 + g4.*g7.*g8 - g2.*g8.*g10);
%     M(:,:,:,:,2,2) = (- g9.^2 + g8.*g10).*(-X1./((- g9.^2 + g8.*g10).*(g10.*g6.^2 - 2.*g6.*g7.*g9 + g8.*g7.^2 + g5.*g9.^2 - g5.*g8.*g10))).^(1./2);
%     M(:,:,:,:,3,1) = (-1./((g10.*g6.^2 - 2.*g6.*g7.*g9 + g8.*g7.^2 + g5.*g9.^2 - g5.*g8.*g10).*(- g2.^2.*g9.^2 + g8.*g10.*g2.^2 - 2.*g10.*g2.*g3.*g6 + 2.*g2.*g3.*g7.*g9 + 2.*g2.*g4.*g6.*g9 - 2.*g8.*g2.*g4.*g7 - g3.^2.*g7.^2 + g5.*g10.*g3.^2 + 2.*g3.*g4.*g6.*g7 - 2.*g5.*g3.*g4.*g9 - g4.^2.*g6.^2 + g5.*g8.*g4.^2 + g1.*g10.*g6.^2 - 2.*g1.*g6.*g7.*g9 + g1.*g8.*g7.^2 + g1.*g5.*g9.^2 - g1.*g5.*g8.*g10))).^(1./2).*(g3.*g7.^2 - g4.*g6.*g7 + g2.*g6.*g10 - g2.*g7.*g9 - g3.*g5.*g10 + g4.*g5.*g9);
%     M(:,:,:,:,3,2) = -(g6.*g10 - g7.*g9).*(-X1./((- g9.^2 + g8.*g10).*(g10.*g6.^2 - 2.*g6.*g7.*g9 + g8.*g7.^2 + g5.*g9.^2 - g5.*g8.*g10))).^(1./2);
%     M(:,:,:,:,3,3) = g10.*(X2./(g10.*(- g9.^2 + g8.*g10))).^(1./2);
%     M(:,:,:,:,4,1) = (-1./((g10.*g6.^2 - 2.*g6.*g7.*g9 + g8.*g7.^2 + g5.*g9.^2 - g5.*g8.*g10).*(- g2.^2.*g9.^2 + g8.*g10.*g2.^2 - 2.*g10.*g2.*g3.*g6 + 2.*g2.*g3.*g7.*g9 + 2.*g2.*g4.*g6.*g9 - 2.*g8.*g2.*g4.*g7 - g3.^2.*g7.^2 + g5.*g10.*g3.^2 + 2.*g3.*g4.*g6.*g7 - 2.*g5.*g3.*g4.*g9 - g4.^2.*g6.^2 + g5.*g8.*g4.^2 + g1.*g10.*g6.^2 - 2.*g1.*g6.*g7.*g9 + g1.*g8.*g7.^2 + g1.*g5.*g9.^2 - g1.*g5.*g8.*g10))).^(1./2).*(g4.*g6.^2 - g3.*g6.*g7 - g2.*g6.*g9 + g2.*g7.*g8 + g3.*g5.*g9 - g4.*g5.*g8);
%     M(:,:,:,:,4,2) = (g6.*g9 - g7.*g8).*(-X1./((- g9.^2 + g8.*g10).*(g10.*g6.^2 - 2.*g6.*g7.*g9 + g8.*g7.^2 + g5.*g9.^2 - g5.*g8.*g10))).^(1./2);
%     M(:,:,:,:,4,3) = -g9.*(X2./(g10.*(- g9.^2 + g8.*g10))).^(1./2);
%     M(:,:,:,:,4,4) = (X3./g10).^(1./2);

    % Old (bad)
%
%     M(:,:,:,:,1,1) = -(-1./((g10.*g6.^2 - 2.*g6.*g7.*g9 + g8.*g7.^2 + g5.*g9.^2 - g5.*g8.*g10).*(- g2.^2.*g9.^2 + g8.*g10.*g2.^2 - 2.*g10.*g2.*g3.*g6 + 2.*g2.*g3.*g7.*g9 + 2.*g2.*g4.*g6.*g9 - 2.*g8.*g2.*g4.*g7 - g3.^2.*g7.^2 + g5.*g10.*g3.^2 + 2.*g3.*g4.*g6.*g7 - 2.*g5.*g3.*g4.*g9 - g4.^2.*g6.^2 + g5.*g8.*g4.^2 + g1.*g10.*g6.^2 - 2.*g1.*g6.*g7.*g9 + g1.*g8.*g7.^2 + g1.*g5.*g9.^2 - g1.*g5.*g8.*g10))).^(1./2).*(g10.*g6.^2 - 2.*g6.*g7.*g9 + g8.*g7.^2 + g5.*g9.^2 - g5.*g8.*g10);
%     M(:,:,:,:,2,1) = (-1./((g10.*g6.^2 - 2.*g6.*g7.*g9 + g8.*g7.^2 + g5.*g9.^2 - g5.*g8.*g10).*(- g2.^2.*g9.^2 + g8.*g10.*g2.^2 - 2.*g10.*g2.*g3.*g6 + 2.*g2.*g3.*g7.*g9 + 2.*g2.*g4.*g6.*g9 - 2.*g8.*g2.*g4.*g7 - g3.^2.*g7.^2 + g5.*g10.*g3.^2 + 2.*g3.*g4.*g6.*g7 - 2.*g5.*g3.*g4.*g9 - g4.^2.*g6.^2 + g5.*g8.*g4.^2 + g1.*g10.*g6.^2 - 2.*g1.*g6.*g7.*g9 + g1.*g8.*g7.^2 + g1.*g5.*g9.^2 - g1.*g5.*g8.*g10))).^(1./2).*(g2.*g9.^2 + g3.*g6.*g10 - g3.*g7.*g9 - g4.*g6.*g9 + g4.*g7.*g8 - g2.*g8.*g10);
%     M(:,:,:,:,2,2) = (- g9.^2 + g8.*g10).*(-X1./((- g9.^2 + g8.*g10).*(g10.*g6.^2 - 2.*g6.*g7.*g9 + g8.*g7.^2 + g5.*g9.^2 - g5.*g8.*g10))).^(1./2);
%     M(:,:,:,:,3,1) = (-1./((g10.*g6.^2 - 2.*g6.*g7.*g9 + g8.*g7.^2 + g5.*g9.^2 - g5.*g8.*g10).*(- g2.^2.*g9.^2 + g8.*g10.*g2.^2 - 2.*g10.*g2.*g3.*g6 + 2.*g2.*g3.*g7.*g9 + 2.*g2.*g4.*g6.*g9 - 2.*g8.*g2.*g4.*g7 - g3.^2.*g7.^2 + g5.*g10.*g3.^2 + 2.*g3.*g4.*g6.*g7 - 2.*g5.*g3.*g4.*g9 - g4.^2.*g6.^2 + g5.*g8.*g4.^2 + g1.*g10.*g6.^2 - 2.*g1.*g6.*g7.*g9 + g1.*g8.*g7.^2 + g1.*g5.*g9.^2 - g1.*g5.*g8.*g10))).^(1./2).*(g3.*g7.^2 - g4.*g6.*g7 + g2.*g6.*g10 - g2.*g7.*g9 - g3.*g5.*g10 + g4.*g5.*g9);
%     M(:,:,:,:,3,2) = -(g6.*g10 - g7.*g9).*(-X1./((- g9.^2 + g8.*g10).*(g10.*g6.^2 - 2.*g6.*g7.*g9 + g8.*g7.^2 + g5.*g9.^2 - g5.*g8.*g10))).^(1./2);
%     M(:,:,:,:,3,3) = -g10.*(X2./(g10.*(- g9.^2 + g8.*g10))).^(1./2);
%     M(:,:,:,:,4,1) = (-1./((g10.*g6.^2 - 2.*g6.*g7.*g9 + g8.*g7.^2 + g5.*g9.^2 - g5.*g8.*g10).*(- g2.^2.*g9.^2 + g8.*g10.*g2.^2 - 2.*g10.*g2.*g3.*g6 + 2.*g2.*g3.*g7.*g9 + 2.*g2.*g4.*g6.*g9 - 2.*g8.*g2.*g4.*g7 - g3.^2.*g7.^2 + g5.*g10.*g3.^2 + 2.*g3.*g4.*g6.*g7 - 2.*g5.*g3.*g4.*g9 - g4.^2.*g6.^2 + g5.*g8.*g4.^2 + g1.*g10.*g6.^2 - 2.*g1.*g6.*g7.*g9 + g1.*g8.*g7.^2 + g1.*g5.*g9.^2 - g1.*g5.*g8.*g10))).^(1./2).*(g4.*g6.^2 - g3.*g6.*g7 - g2.*g6.*g9 + g2.*g7.*g8 + g3.*g5.*g9 - g4.*g5.*g8);
%     M(:,:,:,:,4,2) = (g6.*g9 - g7.*g8).*(-X1./((- g9.^2 + g8.*g10).*(g10.*g6.^2 - 2.*g6.*g7.*g9 + g8.*g7.^2 + g5.*g9.^2 - g5.*g8.*g10))).^(1./2);
%     M(:,:,:,:,4,3) = g9.*(X2./(g10.*(- g9.^2 + g8.*g10))).^(1./2);
%     M(:,:,:,:,4,4) = (X3./g10).^(1./2);

%
% if sum(isinf(M),'all')
%     warning("Eulerian Transformation is Infinite - Numerical Precision Insufficient")
% end
%
% if ~isreal(M)
%     warning("Eulerian Transformation is imaginary - Numerical Precision Insufficient")
% end

end


